/**
 * Global variables and mixins used across RUI SCSS
 */
$bodyBg: #fff;
$inputColor: #697684;
$fontSelectionFg: #fff;
$fontSelectionBg: #333f48;

$reaRed: #e4002b;
$loadingBgColour: #A4A4A4;
$borderColor: #e3e3e3;
$errorColor: #f34851;

$defaultDark: #333f48;
$defaultMedium: #697684;
$defaultLight: #c8c9c7;
$defaultUltra: #f5f5f6;

//Social media colors;
$facebookColor: #48649d;
$twitterColor: #4e9ec3;
$pinterestColor: #c9232d;
$linkedinColor: #2286bb;
$googleplusColor: #db4c3f;
$youtubeColor: #ca1c26;

$fontDefault: 'Museo-Sans-300', 'Helvetica Neue', Helvetica, Arial, sans-serif;
$fontMedium: 'Museo-Sans-500', 'Helvetica Neue', Helvetica, Arial, sans-serif;
$fontHeavy: 'Museo-Sans-700', 'Helvetica Neue', Helvetica, Arial, sans-serif;
$fontHeavier: 'Museo-Sans-900', 'Helvetica Neue', Helvetica, Arial, sans-serif;

$fontSerif: Georgia, serif;
$fontMono: Inconsolata, monospace;

$staticAssets: '//s1.rui.au.reastatic.net/rui-static/';
$staticFonts: $staticAssets + 'font/';
$staticImgs: $staticAssets + 'img/';

/**
 * Responsive Breakpoints
 */
$desktop: 1010px;
$tabletLandscape: 960px;
$tabletPortrait: 768px;
$phoneLandscape: 563px;
$phonePortrait: 360px;
$defaultMargin: 30px;

$gridPadding: 15px;

// --------------------------------------------------------
// arrows
// --------------------------------------------------------
// $direction: top, left, right, bottom, top-left, top-right, bottom-left, bottom-right
// $color: hex, rgb or rbga
// $size: px or em
// @example
// .element{
//     @include arrow(top, #000, 50px);
// }
@mixin arrow($direction, $color, $size){
  display: block;
  height: 0;
  width: 0;

  @if $direction == 'top' {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  } @else if $direction == 'right' {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  } @else if $direction == 'bottom' {
    border-top: $size solid $color;
    border-right: $size solid transparent;
    border-left: $size solid transparent;
  } @else if $direction == 'left' {
    border-top: $size solid transparent;
    border-right: $size solid $color;
    border-bottom: $size solid transparent;
  } @else if $direction == 'top-left' {
    border-top: $size solid $color;
    border-right: $size solid transparent;
  } @else if $direction == 'top-right' {
    border-top: $size solid $color;
    border-left: $size solid transparent;
  } @else if $direction == 'bottom-left' {
    border-bottom: $size solid $color;
    border-right: $size solid transparent;
  } @else if $direction == 'bottom-right' {
    border-bottom: $size solid $color;
    border-left: $size solid transparent;
  }
}

@mixin respond-to($media) {
  @if $media == phone-portrait-and-smaller {
    @media only screen and (max-width: $phonePortrait) {
      @content;
    }
  } @else if $media == phone-landscape {
    @media only screen and (min-width: $phonePortrait + 1) and (max-width: $phoneLandscape) {
      @content;
    }
  } @else if $media == phone-landscape-and-smaller {
    @media only screen and (max-width: $phoneLandscape) {
      @content;
    }
  } @else if $media == tablet-portrait {
    @media only screen and (min-width: $phoneLandscape + 1) and (max-width: $tabletPortrait) {
      @content;
    }
  } @else if $media == tablet-portrait-and-smaller {
    @media only screen and (max-width: $tabletPortrait) {
      @content;
    }
  } @else if $media == tablet-landscape {
    @media only screen and (min-width: $tabletPortrait + 1) and (max-width: $tabletLandscape) {
      @content;
    }
  } @else if $media == tablet-landscape-and-smaller {
    @media only screen and (max-width: $tabletLandscape) {
      @content;
    }
  } @else if $media == wide-screens {
    @media only screen and (min-width: $tabletLandscape + 1) and (max-width: $desktop) {
      @content;
    }
  } @else if $media == wide-screens-and-smaller {
    @media only screen and (max-width: $desktop) {
      @content;
    }
  } @else if $media == retina {
    @media only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (min--moz-device-pixel-ratio: 2),
    only screen and (-o-min-device-pixel-ratio: 2/1),
    only screen and (min-device-pixel-ratio: 2) {
      @content;
    }
  }



}

//Mixin for keyframe animations
@mixin keyframes($animationName) {
  @-webkit-keyframes $animationName{
    @content;
  }
  @-moz-keyframes $animationName{
    @content;
  }
  @-o-keyframes $animationName{
    @content;
  }
  @keyframes $animationName{
    @content;
  }
}

@mixin animate($animationName, $time) {
  -webkit-animation: $animationName $time;
  -moz-animation: $animationName $time;
  -o-animation: $animationName $time;
  animation: $animationName $time;
}

@mixin animation-duration($time) {
  -webkit-animation-duration: $time;
  -moz-animation-duration: $time;
  -o-animation-duration: $time;
  animation-duration: $time;
}

$landscape-tablet-and-under: "max-width: #{$tabletLandscape}";
$landscape-phone-and-under: "max-width: #{$phoneLandscape}";
